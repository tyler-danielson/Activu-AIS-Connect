-- Vis|Ability Interface Server Connect Plugin
-- by Activu
-- June 2022


-- Information block for the plugin
PluginInfo = {
  Name = "Activu~Activu AIS Connect v1.0",
  Version = "1.0",
  BuildVersion = "1.1.0.12",
  Id = "Activu Connection Block",
  Author = "Activu",
  Description = "A plugin to interface with Activu Interface Server.  Written by Tyler Danielson for Activu Corp."  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return {70,70,70 }
end

local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Yellow = {239,156,0},
  DarkGrey = {200,200,200}-- {70,70,70}
}

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "AIS Connect, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Setup","Command Queue"}  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  table.insert(props, {
    Name = "Connection Test Inteval",
    Type = "integer",
    Min = 1,
    Max = 60,
    Value = 5
  })
  return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local controls = {}
  table.insert(controls, {Name = "ais_reconnect",ControlType = "Button",ButtonType = "Trigger",PinStyle = "Output",UserPin = true})--,Icon = "refresh"})
  table.insert(controls, {Name = "connect_disabled",ControlType = "Button",ButtonType = "Toggle",Color = "Red",Text = "Disabled"})
  table.insert(controls, {Name = "IPAddress",ControlType = "Text"})
  table.insert(controls, {Name = "Port",ControlType = "Knob",ControlUnit = "Integer",Min = 0,Max = 65535})
  table.insert(controls, {Name = "Username",ControlType = "Text"})
  table.insert(controls, {Name = "Password",ControlType = "Text"})
  table.insert(controls, {Name = "Status",ControlType = "Indicator",IndicatorType = "Status",PinStyle = "Output",UserPin = true})
  table.insert(controls, {Name = "SendString",ControlType = "Text",PinStyle = "Input",UserPin = true})
  table.insert(controls, {Name = "feedback",ControlType = "Indicator",IndicatorType = "Text",PinStyle = "Output",UserPin = true})
  table.insert(controls, {Name = "debug",ControlType = "Text",PinStyle = "Output",UserPin = true})
  table.insert(controls, {Name = "ClearFeedback",ControlType = "Button",ButtonType = "Trigger",Text = "Clear"})
  table.insert(controls,{Name ="Queue",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = 1})
  table.insert(controls,{Name ="ClearQueue",ControlType = "Button",ButtonType = "Trigger",UserPin = true,PinStyle = "Both",Count = 1})
  return controls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local COMMON_WIDTH = 185
  local COMMON_HEIGHT = 60
  local COMMON_MARGIN = 4
  
  local CurrentPage = PageNames[props["page_index"].Value]
  --AIS Setup Page
  if CurrentPage == "Setup" then
    --*********************
    --* Activu Logo *
    --*********************
    Logo = "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"
    table.insert(graphics,{
      Type="Image",
      Image=Logo,
      Position={COMMON_MARGIN,4},
      Size={COMMON_WIDTH,COMMON_HEIGHT},
    })
  
    --*********************
    --* TCP Connect Block *
    --*********************
    table.insert(graphics,{Type = "GroupBox",Text = "Connection Setup",CornerRadius = 8,StrokeColor = Colors.Yellow,Fill = Colors.DarkGrey,StrokeWidth = 1,Position = {COMMON_MARGIN,69},Size = {185,65},FontSize = 10})
    table.insert(graphics,{Type = "Text",Text = "AIS IP Address:",Position = {COMMON_MARGIN+5,91},Size = {74,16},FontSize = 9,HTextAlign = "Right"})
    layout["IPAddress"] = {PrettyName = "Input IP Address of Activu ASM",Style = "Text",Position = {89,91},Size = {90,16},FontSize = 10,HTextAlign = "Left"}
    table.insert(graphics,{Type = "Text",Text = "Port #:",Position = {COMMON_MARGIN+5,112},Size = {74,16},FontSize = 10,HTextAlign = "Right"})
    layout["Port"] = {PrettyName = "Default: 59095",ControlType = "Knob",ControlUnit = "Integer",Min = 0,Max = 65535,Value = 59095, Position = {89,112},Size = {40,16},FontSize = 10,HTextAlign = "Left"}
  
  
    --*********************
    --* AIS Connect Block *
    --*********************
    table.insert(graphics,{Type = "GroupBox",Text = "AIS Setup",CornerRadius = 8,StrokeColor = Colors.Yellow,Fill = Colors.DarkGrey,StrokeWidth = 1,Position = {COMMON_MARGIN,139},Size = {185,122},FontSize = 10})
    table.insert(graphics,{Type = "Text",Text = "Username:",Position = {COMMON_MARGIN+5,160},Size = {62,16},FontSize = 10,HTextAlign = "Right"})
    table.insert(graphics,{Type = "Text",Text = "Password:",Position = {COMMON_MARGIN+5,182},Size = {62,16},FontSize = 10,HTextAlign = "Right"})
    layout["Username"] = {PrettyName = "AIS Username",Style = "Text",Position = {72,160},Size = {107,16},FontSize = 10}
    layout["Password"] = {PrettyName = "AIS Password",Style = "Text",Position = {72,182},Size = {107,16},FontSize = 10}
    layout["ais_reconnect"] = {PrettyName = "Reconnect",Style = "Button",Position = {41,202},Size = {50,16},Legend = "Reconnect"}
    layout["connect_disabled"] = {PrettyName = "Disabled",Style = "Button",Position = {105,202},Size = {50,16},Legend = "Disabled"}
    layout["Status"] = {PrettyName="Status",Style = "Indicator",Position = {13,226},Size = {169,25},FontSize = 9}
  
    --******************
    --*   Send block   *
    --******************
    table.insert(graphics,{Type = "GroupBox",Text = "AIS Send",Fill = Colors.DarkGrey,StrokeWidth = 1,CornerRadius = 8,StrokeColor = Colors.Yellow,Position = {197,5},Size = {282,60} })
    table.insert(graphics,{Type = "Text",Text = "Hit Enter to Send Command",Position = {203,52},Size = {270,10},FontSize = 8,HTextAlign = "Center"})
    layout["SendString"] = {PrettyName = "SendString",Style = "Text",Position = {203,27},Size = {270,25},FontSize = 10}
    
    --******************
    --* feedback block *
    --******************
    table.insert(graphics,{Type = "GroupBox",Text = "Feedback",Fill = Colors.DarkGrey,StrokeWidth = 1,CornerRadius = 8,StrokeColor = Colors.Yellow,Position = {197,70},Size = {282,60}})
    layout["feedback"] = {PrettyName = "AIS Response",Style = "Text",Position = {203,94},Size = {269,21},FontSize = 8,Color = Colors.Black}
  
    --*****************
    --*  debug block  *
    --*****************
    table.insert(graphics,{Type = "GroupBox",Text = "Debug",Fill = Colors.DarkGrey,StrokeWidth = 1,CornerRadius = 8,StrokeColor = Colors.Yellow,Position = {197,134},Size = {282,127}})
    layout["debug"] = {PrettyName = "feedback",Style = "Indicator",Position = {203,155},Size = {270,96},FontSize = 9,HTextAlign = "Left",VTextAlign = "Bottom"}
    layout["ClearFeedback"] = {PrettyName = "Clear Feedback",Style = "Button",Position = {423,136},Size = {50,18},FontSize = 9,Color = Colors.Red,Legend = "CLEAR"}
  
  elseif CurrentPage == "Command Queue" then
    layout["ClearQueue"] = {PrettyName = "Queue~Clear Queue",Style = "Button",ButtonStyle = "Trigger",Legend="Clear",ButtonVisualStyle = "Gloss",Position = {200,COMMON_MARGIN},Size = {50,20}}
    layout["Queue"] = {PrettyName = "Queue~Queue",Style = "ListBox",TextBoxStyle = "Normal",IsReadOnly = true,Fill = Colors.White,HTextAlign = "Center",Position = {COMMON_MARGIN,COMMON_MARGIN+25},Size = {250,100}}
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  --defaults
  ----remove 'locals'
  --********************************************************************************
  --* Aliases
  --********************************************************************************
  editIPaddr = Controls.IPAddress
  editAISPort = Controls.Port
  btnDisabled = Controls.connect_disabled
  btnReconnect = Controls.ais_reconnect
  btnClrFb = Controls.ClearFeedback
  editAISUser = Controls.Username
  editAISPW = Controls.Password
  txtDebug = Controls.debug
  editSendStr = Controls.SendString
  editStatus = Controls.Status
  editFeedback = Controls.feedback
  intCheckConnect = Properties["Connection Test Inteval"]
  btnClear = Controls.ClearQueue
  btnDisplay = Controls.Queue
  
  
  --********************************************************************************
  --* Constants
  --********************************************************************************
  INCORRECT_PASS = "-13"
  INC_PASS_RESPONSE = "Incorrect Password"
  USER_LOCKED = "-10"
  USER_LOCK_RESP = "User Account Locked"
  OK = "0"
  DATA_ERROR = "-20"
  LDAP_ERROR = "-5000"
  MAX_RETRY_COUNT  = 3
  DEBUG_WINDOW_SIZE = -1500
  NOTIFICATIONS_LABEL = 'aisSend'
  INTERVAL = intCheckConnect.Value*60
  
  
  --********************************************************************************
  --* Enumerated types
  --********************************************************************************
  CONN_COLOR   = {GREY = 0, RED = 1, YELLOW = 2, GREEN = 3}
                --Green   Orange           Red        Grey            Red          Blue
  STATUS_STATE = {OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5}
  
  --********************************************************************************
  --* Global objects/variables
  --********************************************************************************
  feedback = ""
  lastCommand = ""
  tick = 0
  timer = Timer.New()
  QueueTimer = Timer.New()
  Activu = TcpSocket.New()
  Activu.ReadTimeout = 30
  Activu.WriteTimeout = 30
  Activu.ReconnectTimeout = 5
  loginAttempts = 0
  SendQueue = {}
  DebugFunction=false
  
  
  
  --********************************************************************************
  --* Debug display/print functions
  --********************************************************************************
  
  --********************************************************************************
  --* Function: Debug(response)
  --* Description: prints data into console and debug window.
  --********************************************************************************
  function Debug(response)
    local newString = string.sub(txtDebug.String..'\r\r'..response, DEBUG_WINDOW_SIZE)
    txtDebug.String = newString
  end
  
  
  --********************************************************************************
  --* Discovery Functions
  --********************************************************************************
  
  --********************************************************************************
  --* General Functions
  --********************************************************************************
  
  --********************************************************************************
  --* Function: RGBToStr(color)
  --* Description: Converts RGB type color to string
  --* credit:  Chris Lord (QSC)
  --********************************************************************************
  function RGBToStr(color)
    return string.format("#%.2x%.2x%.2x",color[1],color[2],color[3])
  end
  
  
  --********************************************************************************
  --* Function: SendCommand(commandString)
  --* Description: Send string command to AIS
  --********************************************************************************
  function SendCommand(commandString)
    local i,j = "",""
    i, j = string.find(commandString,"[^,]+")
    lastCommand = string.sub(commandString, i,j)
    Activu:Write(commandString.."\n")
    Debug('TX: '..commandString:gsub( editAISPW.String, "*****")) --replace password string with Asterisks
  end
  
  --********************************************************************************
  --* Function: TCPConnect()
  --* Description: Enable TCP Connection
  --********************************************************************************
  function TCPConnect()
    local IPAddress = editIPaddr.String
    local port = editAISPort.Value
    ClearQueue()
    if #IPAddress > 0 then
      InputValid(editIPaddr,true)
      Activu:Connect(IPAddress,port)
    else
      ReportStatus("MISSING","")
      InputValid(editIPaddr,false)
    end
    
  end
  
  --********************************************************************************
  --* Function: AIS_Login()
  --* Description: Log in to the Activu AIS connection
  --********************************************************************************
  function AIS_Login()
    lastCommand = "Login"
    if #editAISUser.String < 2 then
      editAISUser.Color = "Red"
    elseif #editAISPW.String < 2 then
      editAISPW.Color = "Red"
    else
      editAISUser.Color = ""
      editAISPW.Color = ""
      if Activu.IsConnected then
        local username = editAISUser.String
        local password = editAISPW.String
        local loginString = "Login," .. username .. "," .. password
        ReportStatus("FAULT","Logging In")
        SendCommand(loginString)
      end
    end
  end
  
  
  --********************************************************************************
  --* Function: ClearFeedback()
  --* Description: Clear Feedback window
  --********************************************************************************
  function ClearFeedback()
    txtDebug.String = ""
  end
  
  --********************************************************************************
  --* Function: InputValid(control,boolean)
  --* Description: Set text input block colors based on validity check
  --********************************************************************************
  function InputValid(control,boolean)
    if boolean then
      control.Color = ""
    else
      control.Color = "Red"
    end
  end
  
  
  --********************************************************************************
  --* Function: RXHandler(name,data)
  --* Description: Send received data from Notifications to AIS Send Block
  --********************************************************************************
  function RXHandler(name,data)
    Debug(string.format("Notification Name: \"%s\"\t \r Data: \"%s\"",name,data))
    AddToQueue(data)
    --SendCommand(data)
  end
  
  
  --********************************************************************************
  --* TCP Connection Handlers
  --********************************************************************************
  
  --********************************************************************************
  --* Function: dataHandler(connection)
  --* Description: Send received data from Notifications to AIS Send Block
  --********************************************************************************
  function DataHandler(Activu)
    feedback = Activu:ReadLine(TcpSocket.EOL.CrLf)
    if feedback ~= nil then
      --local data = {}
      tick = 0 --reset timer
      --data['feedback'] = feedback
      --data['lastCommand'] = lastCommand
      --local output = qsc_json.encode(data)
      local output = lastCommand..":"..feedback
      editFeedback.String = output--'{\"feedback\":\"'..feedback..'\",\"lastCommand\":\"'..lastCommand..'\"}'
      Debug('RX: '..feedback)
      ErrorCheck(feedback)
      Notifications.Publish('aisFeedback',output)
    end
  
    if lastCommand == "IsConnected" then
      Debug(lastCommand.." | "..feedback)
      if feedback ~= "0" then
        if loginAttempts < 3 then
          AIS_Login()
        else
          btnDisabled.Boolean = true
        end
      end
    end
    --clear last command
    --lastCommand = ""
  end
  
  --********************************************************************************
  --* Function: ConnectHandler(connection)
  --* Description: What to do when TCP Connects
  --********************************************************************************
  function ConnectHandler(Activu)
    InputValid(editIPaddr,true)
    InputValid(editAISPort,true)
    if not btnDisabled.Boolean then
      Debug("TCP socket is connected")
      AIS_Login()
    end
  end
  
  --********************************************************************************
  --* Function: ReconectHandler(connection)
  --* Description: What to do when TCP is Reconnecting
  --********************************************************************************
  function ReconnectHandler(Activu)
    if not btnDisabled.Boolean then
      ReportStatus("FAULT","TCP Connection Reconnecting")
      Debug("TCP socket is reconnecting")
    end
  end
  
  --********************************************************************************
  --* Function: ClosedHandler(connection)
  --* Description: What to do when TCP Closes
  --********************************************************************************
  function ClosedHandler(Activu)
    ReportStatus("FAULT","TCP Connection Closed")
    Debug("TCP socket was closed by the remote end")
  end
  
  --********************************************************************************
  --* Function: ErrorHandler(connection)
  --* Description: What to do when TCP has and Error
  --********************************************************************************
  function ErrorHandler(Activu,err)
    ReportStatus("FAULT","Connect Error",err)
    Debug("TCP socket had an error: "..err)
  end
  
  --********************************************************************************
  --* Function: TimeoutHandler(connection)
  --* Description: What to do when TCP times out
  --********************************************************************************
  function TimeoutHandler(Activu,err)
    ReportStatus("FAULT","TCP Connection Timeout")
    Debug("TCP socket timed out "..err)
  end
  
  
  --********************************************************************************
  --* Function: ErrorCheck(data)
  --* Description: Check AIS Feedback for error code
  --********************************************************************************
  function ErrorCheck(feedback)
    if feedback == INCORRECT_PASS then
      ReportStatus("FAULT",INC_PASS_RESPONSE)
      InputValid(editAISUser,false)
      InputValid(editAISPW,false)
      btnDisabled.Boolean = true
    elseif feedback == USER_LOCKED then
      ReportStatus("FAULT",USER_LOCK_RESP)
      InputValid(editAISUser,false)
      InputValid(editAISPW,false)
      btnDisabled.Boolean = true
    elseif feedback == DATA_ERROR then
      ReportStatus("FAULT","Cannot Retrieve Data")
      failedLogin()
    elseif feedback == LDAP_ERROR then
      ReportStatus("FAULT","LDAP Authentication Error")
      failedLogin()
      btnDisabled.Boolean = true
    elseif feedback == OK then
      ReportStatus("OK","Logged In")
      Debug("AIS is connected")
    end
  end
  
  --********************************************************************************
  --* Function: ReportStatus(state, msg, debugStr)
  --* Description: Update status message and state to given values
  --********************************************************************************
  function ReportStatus(state, msg, debugStr)
    --first check to see if there is a login error warning
    if not LoginWarningCheck() then
      editStatus.Value = STATUS_STATE[state]
      editStatus.String = msg
      if (STATUS_STATE[state] > 0) then
        ClearQueue()
        if debugStr ~= nil then
          if debugStr ~= "" then
            if DebugFunction then print(debugStr.."-"..msg) end
          else
            if DebugFunction then print(msg) end
          end
        else
          if DebugFunction then print(msg) end
        end
      end
    end
  end
  
  --********************************************************************************
  --* Function: failedLogin()
  --* Description: Update number of login attempts
  --********************************************************************************
  function failedLogin()
    loginAttempts = loginAttempts + 1
    ClearQueue()
  end
  
  
  --********************************************************************************
  --* Function: LoginWarningCheck()
  --* Description: Check to see if current Status has login error
  --********************************************************************************
  function LoginWarningCheck()
    local currentErr = editStatus.String
    Debug(currentErr)
    if currentErr == INC_PASS_RESPONSE or currentErr == USER_LOCK_RESP then
      return true
    else
      return false
    end
  end
  
  
  --********************************************************************************
  --* First in First Out Queue
  --********************************************************************************
   --Command Send Queue
   function UpdateQueue()
    if DebugFunction then print("UpdateQueue() Called") end
    btnDisplay.Choices = SendQueue
  end
  
  -- Queue management
  function AddToQueue(cmd)
    if DebugFunction then print("AddToQueue() Called") end
    table.insert(SendQueue,cmd)
    UpdateQueue()
  end
  
  function QueueGet()
    if DebugFunction then print("QueueGet() Called") end
    local cmd = ""
    if #SendQueue > 0 then
      cmd = SendQueue[1]
      table.remove(SendQueue,1)
      UpdateQueue()
    end
    return cmd
  end
  
  function Queue()
    if DebugFunction then print("Queue() Called") end
    if #SendQueue > 0 then
      SendCommand(QueueGet())
    end
  end
  
  function ClearQueue()
    if DebugFunction then print("ClearQueue() Called") end
    SendQueue = {}
    UpdateQueue()
  end
  
  function SendingCommand()
    if DebugFunction then print("SendingCommand() Called") end
  end
  
  
  
  --********************************************************************************
  --* Function: disableConnect(object)
  --* Description: Reset number of loginAttempts and Reconnect to AIS
  --********************************************************************************
  function disableConnect(obj)
    if not obj.Boolean then
      AIS_Login()
      loginAttempts = 0
    else
      SendCommand("Logout")
      Activu:Disconnect()
      ReportStatus("NOTPRESENT","Connection Disabled")
    end
  end
  
  
  --********************************************************************************
  --* Function: ConnectCheck()
  --* Description: Regularly check connection status to AIS.  Resets on response
  --********************************************************************************
  function ConnectCheck()
    if #editAISUser.String>0 and #editAISPW.String>0 and #editIPaddr.String>0 and #editAISPort.String>0 and not btnDisabled.Boolean then
      tick = tick + 1
      --print(tick)
      if tick >= INTERVAL then
        local user = editAISUser.String
        tick = 0
        feedback = ""
        SendCommand("IsConnected,"..user)
      end
    else
      tick = 0
    end
  end
  
  --********************************************************************************
  --* Function: Event Handler for Send String input block
  --* Description: Send string from AIS send block to AIS
  --********************************************************************************
  function StringBlockSend(obj)
    if obj.String ~= " " then
      SendCommand(obj.String)
    end
  end
  
  --********************************************************************************
  --* Event Handlers for Controls
  --********************************************************************************
  
  editIPaddr.EventHandler = TCPConnect
  editAISPort.EventHandler = TCPConnect
  btnReconnect.EventHandler = AIS_Login
  editAISUser.EventHandler = AIS_Login
  editAISPW.EventHandler = AIS_Login
  btnClrFb.EventHandler = ClearFeedback
  btnDisabled.EventHandler = disableConnect
  timer.EventHandler = ConnectCheck
  btnClear.EventHandler = ClearQueue
  QueueTimer.EventHandler  = Queue
  editSendStr.EventHandler = StringBlockSend
  
  
  --********************************************************************************
  --* Function: Initialize()
  --* Description: Initialization code for the plugin
  --********************************************************************************
  function Initialize()
    --IPAddress = editIPaddr.String
    --Port = editAISPort.Value
    --Activu:Connect(IPAddress,Port)
    Activu.Connected = ConnectHandler
    Activu.Reconnect = ReconnectHandler
    Activu.Data = DataHandler
    Activu.Closed = ClosedHandler
    Activu.Error = ErrorHandler
    Activu.Timeout = TimeoutHandler
  
    timer:Start(1)
    QueueTimer:Start(0.5)
  
    Notifications.Subscribe( NOTIFICATIONS_LABEL, RXHandler )
    TCPConnect()
  
  end
  
  Initialize()
end
